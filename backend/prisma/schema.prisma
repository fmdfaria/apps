generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Especialidade {
  id            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String                        @unique @db.VarChar(100)
  createdAt     DateTime?                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?                     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profissionais ProfissionaisEspecialidades[]

  @@map("especialidades")
}

model ConselhoProfissional {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sigla         String         @unique @db.VarChar(10)
  nome          String         @db.VarChar(100)
  createdAt     DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profissionais Profissional[]

  @@map("conselhos_profissionais")
}

model Profissional {
  id                  String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                String                        @db.VarChar(150)
  cpf                 String                        @unique @db.VarChar(14)
  cnpj                String?                       @db.VarChar(18)
  razaoSocial         String?                       @map("razao_social") @db.VarChar(150)
  email               String                        @unique @db.VarChar(100)
  whatsapp            String?                       @db.VarChar(20)
  logradouro          String?                       @db.VarChar(100)
  numero              String?                       @db.VarChar(10)
  complemento         String?                       @db.VarChar(50)
  bairro              String?                       @db.VarChar(50)
  cidade              String?                       @db.VarChar(50)
  estado              String?                       @db.VarChar(2)
  cep                 String?                       @db.VarChar(10)
  comprovanteEndereco String?                       @map("comprovante_endereco")
  conselhoId          String?                       @map("conselho_id") @db.Uuid
  numeroConselho      String?                       @map("numero_conselho") @db.VarChar(30)
  comprovanteRegistro String?                       @map("comprovante_registro")
  banco               String?                       @db.VarChar(100)
  tipoConta           String?                       @map("tipo_conta") @db.VarChar(20)
  agencia             String?                       @db.VarChar(10)
  contaNumero         String?                       @map("conta_numero") @db.VarChar(15)
  contaDigito         String?                       @map("conta_digito") @db.VarChar(2)
  pix                 String?                       @db.VarChar(100)
  tipo_pix            String?                       @db.VarChar(30)
  comprovanteBancario String?                       @map("comprovante_bancario")
  userId              String?                       @map("user_id") @db.Uuid
  ativo               Boolean?                      @default(true)
  createdAt           DateTime?                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?                     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamentos        Agendamento[]
  contratos           ContratoProfissional[]
  disponibilidades    DisponibilidadeProfissional[]
  precos              PrecosServicosProfissionais[]
  evolucoes           EvolucaoPaciente[]
  filaEspera          FilaEspera[]      @relation("ProfissionalFilaEspera")
  conselho            ConselhoProfissional?         @relation(fields: [conselhoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  especialidades      ProfissionaisEspecialidades[]
  servicos            ProfissionaisServicos[]

  @@index([cpf], map: "idx_profissionais_cpf")
  @@index([email], map: "idx_profissionais_email")
  @@map("profissionais")
}

model Paciente {
  id                  String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nomeCompleto        String                       @map("nome_completo") @db.VarChar(150)
  nomeResponsavel     String?                      @map("nome_responsavel") @db.VarChar(150)
  email               String?                      @db.VarChar(100)
  whatsapp            String                       @db.VarChar(20)
  cpf                 String?                      @db.VarChar(14)
  dataNascimento      DateTime?                    @map("data_nascimento") @db.Date
  tipoServico         String?                      @map("tipo_servico") @db.VarChar(20)
  convenioId          String?                      @map("convenio_id") @db.Uuid
  numeroCarteirinha   String?                      @map("numero_carteirinha") @db.VarChar(50)
  userId              String?                      @map("user_id") @db.Uuid
  ativo               Boolean?                     @default(true)
  createdAt           DateTime?                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?                    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamentos        Agendamento[]
  atendimentosServico AtendimentoPacienteServico[]
  evolucoes           EvolucaoPaciente[]
  convenio            Convenio?                    @relation(fields: [convenioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  precosParticulares  PrecosParticulares[]
  pedidos             PacientePedido[]
  filaEspera          FilaEspera[]      @relation("PacienteFilaEspera")

  @@index([cpf], map: "idx_pacientes_cpf")
  @@index([email], map: "idx_pacientes_email")
  @@map("pacientes")
}

model Banco {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  codigo    String    @unique @db.VarChar(10)
  nome      String    @db.VarChar(100)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("bancos")
}

model Convenio {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome         String        @unique @db.VarChar(100)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamentos Agendamento[]
  servicos     Servico[]
  pacientes    Paciente[]

  @@map("convenios")
}

model Servico {
  id                              String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                            String                        @db.VarChar(150)
  descricao                       String?
  duracaoMinutos                  Int                           @map("duracao_minutos")
  preco                           Decimal                       @db.Decimal(10, 2)
  percentualClinica               Decimal?                      @map("percentual_clinica") @db.Decimal(5, 2)
  percentualProfissional          Decimal?                      @map("percentual_profissional") @db.Decimal(5, 2)
  valorClinica                    Decimal?                      @map("valor_clinica") @db.Decimal(10, 2)
  valorProfissional               Decimal?                      @map("valor_profissional") @db.Decimal(10, 2)
  procedimentoPrimeiroAtendimento String?                       @map("procedimento_primeiro_atendimento") @db.VarChar(100)
  procedimentoDemaisAtendimentos  String?                       @map("procedimento_demais_atendimentos") @db.VarChar(100)
  convenioId                      String?                       @map("convenio_id") @db.Uuid
  ativo                           Boolean?                      @default(true)
  createdAt                       DateTime?                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                       DateTime?                     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamentos                    Agendamento[]
  atendimentosPaciente            AtendimentoPacienteServico[]
  convenio                        Convenio?                     @relation(fields: [convenioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  precosParticulares              PrecosParticulares[]
  precosProfissionais             PrecosServicosProfissionais[]
  profissionais                   ProfissionaisServicos[]
  pedidos                         PacientePedido[]
  filaEspera                      FilaEspera[]      @relation("ServicoFilaEspera")

  @@unique([nome, duracaoMinutos])
  @@map("servicos")
}

model Recurso {
  id                          String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                        String                       @db.VarChar(100)
  descricao                   String?
  createdAt                   DateTime?                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                   DateTime?                    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamentos                Agendamento[]
  disponibilidadesProfissional DisponibilidadeProfissional[]

  @@map("recursos")
}

model ProfissionaisEspecialidades {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profissionalId  String        @map("profissional_id") @db.Uuid
  especialidadeId String        @map("especialidade_id") @db.Uuid
  createdAt       DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  especialidade   Especialidade @relation(fields: [especialidadeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profissional    Profissional  @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profissionalId, especialidadeId])
  @@map("profissionais_especialidades")
}

model ProfissionaisServicos {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profissionalId String       @map("profissional_id") @db.Uuid
  servicoId      String       @map("servico_id") @db.Uuid
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profissional   Profissional @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico        Servico      @relation(fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profissionalId, servicoId])
  @@map("profissionais_servicos")
}

model PrecosServicosProfissionais {
  id                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profissionalId         String       @map("profissional_id") @db.Uuid
  servicoId              String       @map("servico_id") @db.Uuid
  precoProfissional      Decimal?     @map("preco_profissional") @db.Decimal(10, 2)
  precoClinica           Decimal?     @map("preco_clinica") @db.Decimal(10, 2)
  percentualClinica      Decimal?     @map("percentual_clinica") @db.Decimal(5, 2)
  percentualProfissional Decimal?     @map("percentual_profissional") @db.Decimal(5, 2)
  createdAt              DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profissional           Profissional @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico                Servico      @relation(fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([profissionalId, servicoId])
  @@map("precos_servicos_profissionais")
}

model PrecosParticulares {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pacienteId String    @map("paciente_id") @db.Uuid
  servicoId  String    @map("servico_id") @db.Uuid
  preco      Decimal   @db.Decimal(10, 2)
  tipoPagamento String?  @map("tipo_pagamento") @db.VarChar(50)
  pagamentoAntecipado Boolean? @map("pagamento_antecipado")
  dataPagamento DateTime? @map("data_pagamento") @db.Date
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paciente   Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico    Servico   @relation(fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([pacienteId, servicoId])
  @@map("precos_particulares")
}

model Agendamento {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pacienteId         String             @map("paciente_id") @db.Uuid
  profissionalId     String             @map("profissional_id") @db.Uuid
  tipoAtendimento    String             @map("tipo_atendimento") @db.VarChar(20)
  recursoId          String             @map("recurso_id") @db.Uuid
  convenioId         String             @map("convenio_id") @db.Uuid
  servicoId          String             @map("servico_id") @db.Uuid
  dataHoraInicio     DateTime           @map("data_hora_inicio") @db.Timestamptz(6)
  dataHoraFim        DateTime           @map("data_hora_fim") @db.Timestamptz(6)
  codLiberacao       String?            @map("cod_liberacao") @db.VarChar(50)
  statusCodLiberacao String?            @map("status_cod_liberacao") @db.VarChar(30)
  dataCodLiberacao   DateTime?          @map("data_cod_liberacao") @db.Date
  status             String?            @default("agendamento") @db.VarChar(20)
  compareceu         Boolean?
  assinaturaPaciente Boolean?           @map("assinatura_paciente")
  assinaturaProfissional Boolean?       @map("assinatura_profissional")
  dataAtendimento    DateTime?          @map("data_atendimento") @db.Date
  recebimento        Boolean?           @default(false)
  pagamento          Boolean?           @default(false)
  urlMeet            String?            @map("url_meet") @db.VarChar(500)
  googleEventId      String?            @map("google_event_id") @db.VarChar(255)
  // Campos para agendamentos recorrentes
  serieId            String?            @map("serie_id") @db.Uuid
  serieMaster        Boolean?           @default(false) @map("serie_master")
  instanciaData      DateTime?          @map("instancia_data") @db.Date
  // Novos campos de avaliação
  avaliadoPorId      String?            @map("avaliado_por_id") @db.Uuid
  motivoReprovacao   String?            @map("motivo_reprovacao")
  createdAt          DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  convenio           Convenio           @relation(fields: [convenioId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paciente           Paciente           @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profissional       Profissional       @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recurso            Recurso            @relation(fields: [recursoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  servico            Servico            @relation(fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  avaliadoPor        User?              @relation("UserAvaliador", fields: [avaliadoPorId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  evolucoes          EvolucaoPaciente[]

  @@index([dataHoraInicio], map: "idx_agendamentos_data_hora_inicio")
  @@index([pacienteId], map: "idx_agendamentos_paciente_id")
  @@index([profissionalId], map: "idx_agendamentos_profissional_id")
  @@index([avaliadoPorId], map: "idx_agendamentos_avaliado_por_id")
  @@map("agendamentos")
}

model DisponibilidadeProfissional {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profissionalId String       @map("profissional_id") @db.Uuid
  recursoId      String?      @map("recurso_id") @db.Uuid
  diaSemana      Int?         @map("dia_semana") @db.SmallInt
  dataEspecifica DateTime?    @map("data_especifica") @db.Date
  horaInicio     DateTime     @map("hora_inicio") @db.Time(6)
  horaFim        DateTime     @map("hora_fim") @db.Time(6)
  observacao     String?
  tipo           String?      @default("disponivel") @db.VarChar(20)
  createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  profissional   Profissional @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recurso        Recurso?     @relation(fields: [recursoId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([recursoId], map: "idx_disponibilidades_profissionais_recurso_id")
  @@map("disponibilidades_profissionais")
}

model ContratoProfissional {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  profissionalId  String           @map("profissional_id") @db.Uuid
  dataInicio      DateTime         @map("data_inicio") @db.Date
  dataFim         DateTime?        @map("data_fim") @db.Date
  arquivoContrato String?          @map("arquivo_contrato")
  observacao      String?
  createdAt       DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  adendos         AdendoContrato[]
  profissional    Profissional     @relation(fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("contratos_profissionais")
}

model AdendoContrato {
  id            String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contratoId    String               @map("contrato_id") @db.Uuid
  dataAdendo    DateTime             @map("data_adendo") @db.Date
  arquivoAdendo String?              @map("arquivo_adendo")
  descricao     String?
  createdAt     DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  contrato      ContratoProfissional @relation(fields: [contratoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("adendos_contratos")
}

model AtendimentoPacienteServico {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pacienteId             String    @map("paciente_id") @db.Uuid
  servicoId              String    @map("servico_id") @db.Uuid
  atendimentosConcluidos Int?      @default(0) @map("atendimentos_concluidos")
  createdAt              DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paciente               Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico                Servico   @relation(fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([pacienteId, servicoId])
  @@map("atendimentos_paciente_servico")
}

model EvolucaoPaciente {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pacienteId        String        @map("paciente_id") @db.Uuid
  agendamentoId     String?       @map("agendamento_id") @db.Uuid
  profissionalId    String?       @map("profissional_id") @db.Uuid
  dataEvolucao      DateTime      @map("data_evolucao") @db.Date
  objetivoSessao    String?       @map("objetivo_sessao")
  descricaoEvolucao String?       @map("descricao_evolucao")
  createdAt         DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  agendamento       Agendamento?  @relation(fields: [agendamentoId], references: [id], onUpdate: NoAction)
  paciente          Paciente      @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profissional      Profissional? @relation(fields: [profissionalId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([profissionalId], map: "idx_evolucoes_pacientes_profissional_id")
  @@map("evolucoes_pacientes")
}

model Anexo {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entidadeId       String    @map("entidade_id") @db.Uuid
  bucket           String    @db.VarChar(100)
  nomeArquivo      String    @map("nome_arquivo") @db.VarChar(255)
  descricao        String?
  criadoPor        String?   @map("criado_por") @db.Uuid
  url              String?
  // Novos campos para S3
  s3Key            String?   @map("s3_key") @db.VarChar(500)
  tamanhoBytes     Int?      @map("tamanho_bytes")
  mimeType         String?   @map("mime_type") @db.VarChar(100)
  hashArquivo      String?   @map("hash_arquivo") @db.VarChar(64)
  storageProvider  String?   @default("S3") @map("storage_provider") @db.VarChar(20)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([s3Key], map: "idx_anexos_s3_key")
  @@index([entidadeId], map: "idx_anexos_entidade_id")
  @@map("anexos")
}

model User {
  id                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                   String         @db.VarChar(150)
  email                  String         @unique @db.VarChar(100)
  senha                  String         @db.VarChar(255)
  whatsapp               String         @db.VarChar(15)
  ativo                  Boolean        @default(true)
  primeiroLogin          Boolean        @default(true) @map("primeiro_login")
  profissionalId         String?        @map("profissional_id") @db.Uuid
  pacienteId             String?        @map("paciente_id") @db.Uuid
  criadoEm               DateTime?      @default(now()) @map("criado_em") @db.Timestamptz(6)
  atualizadoEm           DateTime?      @default(now()) @updatedAt @map("atualizado_em") @db.Timestamptz(6)
  resetToken             String?        @map("reset_token") @db.VarChar(255)
  resetTokenExpires      DateTime?      @map("reset_token_expires") @db.Timestamptz(6)
  emailConfirmationToken String?        @map("email_confirmation_token") @db.VarChar(255)
  emailConfirmed         Boolean?       @default(false) @map("email_confirmed")
  avatarUrl              String?        @map("avatar_url") @db.VarChar(500)
  refreshTokens          RefreshToken[]
  userRoles              UserRole[]
  // Relação inversa: agendamentos avaliados por este usuário
  agendamentosAvaliados  Agendamento[]  @relation("UserAvaliador")

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model RefreshToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  criadoEm  DateTime? @default(now()) @map("criado_em") @db.Timestamptz(6)
  ip        String?   @db.VarChar(50)
  userAgent String?   @map("user_agent")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_refresh_tokens_token")
  @@index([userId], map: "idx_refresh_tokens_user_id")
  @@map("refresh_tokens")
}

model Role {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome      String      @unique @db.VarChar(50)
  descricao String?
  ativo     Boolean     @default(true)
  createdAt DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  userRoles UserRole[]
  roleRoutes RoleRoute[]

  @@map("roles")
}

model Route {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path      String      @unique @db.VarChar(255)
  method    String      @db.VarChar(10)
  nome      String      @db.VarChar(100)
  descricao String?
  modulo    String?     @db.VarChar(50)
  ativo     Boolean     @default(true)
  createdAt DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  roleRoutes RoleRoute[]

  @@unique([path, method])
  @@map("routes")
}

model UserRole {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  roleId    String    @map("role_id") @db.Uuid
  ativo     Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, roleId])
  @@index([userId], map: "idx_user_roles_user_id")
  @@index([roleId], map: "idx_user_roles_role_id")
  @@map("user_roles")
}

model RoleRoute {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roleId    String    @map("role_id") @db.Uuid
  routeId   String    @map("route_id") @db.Uuid
  ativo     Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  route     Route     @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([roleId, routeId])
  @@index([roleId], map: "idx_role_routes_role_id")
  @@index([routeId], map: "idx_role_routes_route_id")
  @@map("role_routes")
}

model PacientePedido {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dataPedidoMedico  DateTime? @map("data_pedido_medico") @db.Date
  crm               String?   @db.VarChar(100)
  cbo               String?   @db.VarChar(100)
  cid               String?   @db.VarChar(255)
  autoPedidos       Boolean?  @default(true) @map("auto_pedidos")
  descricao         String?   @db.Text
  servicoId         String?   @map("servico_id") @db.Uuid
  pacienteId        String    @map("paciente_id") @db.Uuid
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paciente          Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico           Servico?  @relation(fields: [servicoId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([pacienteId], map: "idx_pacientes_pedidos_paciente_id")
  @@index([servicoId], map: "idx_pacientes_pedidos_servico_id")
  @@map("pacientes_pedidos")
}

model FilaEspera {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pacienteId         String        @map("paciente_id") @db.Uuid
  servicoId          String        @map("servico_id") @db.Uuid
  profissionalId     String?       @map("profissional_id") @db.Uuid
  horarioPreferencia String        @map("horario_preferencia") @db.VarChar(10)
  observacao         String?
  status             String?       @default("pendente") @db.VarChar(20)
  ativo              Boolean?      @default(true)
  createdAt          DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  paciente           Paciente       @relation("PacienteFilaEspera", fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  servico            Servico        @relation("ServicoFilaEspera", fields: [servicoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profissional       Profissional?  @relation("ProfissionalFilaEspera", fields: [profissionalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([pacienteId], map: "idx_fila_espera_paciente_id")
  @@index([servicoId], map: "idx_fila_espera_servico_id")
  @@index([profissionalId], map: "idx_fila_espera_profissional_id")
  @@index([status], map: "idx_fila_espera_status")
  @@map("fila_de_espera")
}

model Configuracao {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  entidadeTipo String    @map("entidade_tipo") @db.VarChar(50)
  entidadeId   String?   @map("entidade_id") @db.Uuid
  contexto     String    @db.VarChar(100)
  chave        String    @db.VarChar(100)
  valor        String    @db.Text
  tipoValor    String    @default("string") @map("tipo_valor") @db.VarChar(20)
  descricao    String?   @db.Text
  ativo        Boolean   @default(true)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([entidadeTipo, entidadeId, contexto, chave])
  @@index([entidadeTipo, entidadeId], map: "idx_configuracoes_entidade")
  @@index([contexto], map: "idx_configuracoes_contexto")
  @@index([chave], map: "idx_configuracoes_chave")
  @@map("configuracoes")
}

